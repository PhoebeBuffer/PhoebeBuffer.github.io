<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos下yum本地源配置</title>
    <url>/2021/04/25/Centos%E4%B8%8Byum%E6%9C%AC%E5%9C%B0%E6%BA%90%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Centos下yum本地源配置"><a href="#Centos下yum本地源配置" class="headerlink" title="Centos下yum本地源配置"></a>Centos下yum本地源配置</h1><h2 id="1-挂载光盘（安装包）"><a href="#1-挂载光盘（安装包）" class="headerlink" title="1.挂载光盘（安装包）"></a>1.挂载光盘（安装包）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/sr0 /mnt</span><br></pre></td></tr></table></figure>

<h2 id="2-创建本地yum源配置文件"><a href="#2-创建本地yum源配置文件" class="headerlink" title="2.创建本地yum源配置文件"></a>2.创建本地yum源配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d  /etc/yum.repos.d.back</span><br><span class="line">mkdir /etc/yum.repos.d</span><br><span class="line">vim /etc/yum.repos.d/local.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> loacl.repo内容如下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> name可以任意取</span></span><br><span class="line">name = localrepo </span><br><span class="line"><span class="meta">#</span><span class="bash"> 光盘路径，注意是三条斜杠</span></span><br><span class="line">baseurl = file:///mnt </span><br><span class="line">enabeld = 1 </span><br><span class="line"><span class="meta">#</span><span class="bash"> gpgcheck=0时表示不对GPG-KEY进行检查</span></span><br><span class="line">gpgcheck = 0 </span><br></pre></td></tr></table></figure>

<h2 id="3-对yum进行初始化操作（可以略过）"><a href="#3-对yum进行初始化操作（可以略过）" class="headerlink" title="3.对yum进行初始化操作（可以略过）"></a>3.对yum进行初始化操作（可以略过）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">清除缓存</span></span><br><span class="line">yum clean all </span><br><span class="line"><span class="meta">#</span><span class="bash">建立新缓存</span></span><br><span class="line">yum makecache   </span><br></pre></td></tr></table></figure>

<h2 id="4-软件安装"><a href="#4-软件安装" class="headerlink" title="4.软件安装"></a>4.软件安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y (软件名称) </span><br></pre></td></tr></table></figure>

<h2 id="5-恢复原来的环境"><a href="#5-恢复原来的环境" class="headerlink" title="5.恢复原来的环境"></a>5.恢复原来的环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/yum.repos.d</span><br><span class="line">mv /etc/yum.repos.d.back /etc/yum.repos.d</span><br><span class="line">umount /mnt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>安装</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>信息的表示与处理</title>
    <url>/2021/04/24/%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E4%B8%8E%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="信息的表示和处理"><a href="#信息的表示和处理" class="headerlink" title="信息的表示和处理"></a>信息的表示和处理</h1><h2 id="1-信息存储"><a href="#1-信息存储" class="headerlink" title="1.信息存储"></a>1.信息存储</h2><h3 id="十六进制表示法"><a href="#十六进制表示法" class="headerlink" title="十六进制表示法"></a>十六进制表示法</h3><h3 id="字数据大小"><a href="#字数据大小" class="headerlink" title="字数据大小"></a>字数据大小</h3><ul>
<li><p>字长</p>
<p>虚拟地址空间的最大大小。<br>32位/64位<br>long，char<br>基本C 数据类型的典型大小</p>
</li>
</ul>
<h3 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h3><ul>
<li><p>多字节对象</p>
<p>多字节对象都被存储为连续的字节序<br>列，对象的地址为所使用字节中最小的地址。</p>
<ul>
<li><p>大端法</p>
<p>最高有效字节在最前面<br>例 ：x=0x01234567<br>小端法存储：01 23 45 67</p>
</li>
<li><p>小端法</p>
<p>最低有效字节在最前面<br>例 ：x=0x01234567<br>小端法存储：67 45 23 01</p>
</li>
</ul>
</li>
</ul>
<h3 id="表示字符串"><a href="#表示字符串" class="headerlink" title="表示字符串"></a>表示字符串</h3><p>C 语言中字符串被编码为一个以null( 其值为0) 字符结尾的字符数组</p>
<ul>
<li>ASCII 字符码</li>
</ul>
<h3 id="表示代码"><a href="#表示代码" class="headerlink" title="表示代码"></a>表示代码</h3><ul>
<li>程序是字节序列</li>
</ul>
<h3 id="布尔代数简介"><a href="#布尔代数简介" class="headerlink" title="布尔代数简介"></a>布尔代数简介</h3><ul>
<li><p>NOT，AND，OR和EXCLUSIVE-OR</p>
<p>~，&amp;，|，^</p>
</li>
<li><p>位向量运算</p>
</li>
</ul>
<h3 id="C-语言中的位级运算"><a href="#C-语言中的位级运算" class="headerlink" title="C 语言中的位级运算"></a>C 语言中的位级运算</h3><p>将十六进制的参数扩展成二进制表示并执行二进制运算，然后再转换回十六进制。</p>
<ul>
<li><p>掩码运算</p>
<p>x&amp;0xFF</p>
</li>
</ul>
<h3 id="C-语言中的逻辑运算"><a href="#C-语言中的逻辑运算" class="headerlink" title="C 语言中的逻辑运算"></a>C 语言中的逻辑运算</h3><ul>
<li><p>OR，AND，NOT</p>
<p>|| ，&amp;&amp;，!</p>
</li>
</ul>
<h3 id="C-语言中的移位运算"><a href="#C-语言中的移位运算" class="headerlink" title="C 语言中的移位运算"></a>C 语言中的移位运算</h3><ul>
<li>算数移位</li>
<li>逻辑移位</li>
</ul>
<h2 id="2-整数表示"><a href="#2-整数表示" class="headerlink" title="2.整数表示"></a>2.整数表示</h2><h3 id="整型数据类型"><a href="#整型数据类型" class="headerlink" title="整型数据类型"></a>整型数据类型</h3><ul>
<li><p>无符号</p>
</li>
<li><p>有符号</p>
<p>取值范围不对称</p>
</li>
</ul>
<h3 id="无符号数的编码"><a href="#无符号数的编码" class="headerlink" title="无符号数的编码"></a>无符号数的编码</h3><h3 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h3><p>负权重<br>负数的二进制表示<br>比如，5二进制表示为0101，<br>除去符号位即第一位0，<br>对101求反码得到010，<br>反码+1得到011即补码，<br>在首位加上符号位1，<br>则-5用二进制表示是1011。<br>这个求解过程与用公式算的结果是一样的，公式里第一位是负权重</p>
<h3 id="有符号数和无符号数之间的转换"><a href="#有符号数和无符号数之间的转换" class="headerlink" title="有符号数和无符号数之间的转换"></a>有符号数和无符号数之间的转换</h3><p>-12345=53191</p>
<h3 id="C-语言中的有符号数与无符号数"><a href="#C-语言中的有符号数与无符号数" class="headerlink" title="C 语言中的有符号数与无符号数"></a>C 语言中的有符号数与无符号数</h3><h3 id="扩展一个数字的位表示"><a href="#扩展一个数字的位表示" class="headerlink" title="扩展一个数字的位表示"></a>扩展一个数字的位表示</h3><ul>
<li>无符号数的零扩展</li>
<li>补码数的符号扩展</li>
</ul>
<h3 id="截断数字"><a href="#截断数字" class="headerlink" title="截断数字"></a>截断数字</h3><ul>
<li>截断无符号数</li>
<li>截断补码数值</li>
</ul>
<h3 id="关于有符号数与无符号数的建议"><a href="#关于有符号数与无符号数的建议" class="headerlink" title="关于有符号数与无符号数的建议"></a>关于有符号数与无符号数的建议</h3><h2 id="3-整数运算"><a href="#3-整数运算" class="headerlink" title="3.整数运算"></a>3.整数运算</h2><h3 id="无符号加法"><a href="#无符号加法" class="headerlink" title="无符号加法"></a>无符号加法</h3><ul>
<li>无符号数加法</li>
<li>检测无符号数加法中的溢出</li>
<li>无符号数求反</li>
</ul>
<h3 id="补码加法"><a href="#补码加法" class="headerlink" title="补码加法"></a>补码加法</h3><ul>
<li>补码加法</li>
<li>检测补码加法中的溢出</li>
</ul>
<h3 id="补码的非"><a href="#补码的非" class="headerlink" title="补码的非"></a>补码的非</h3><ul>
<li><p>补码的非</p>
<p>对每一位求补，再对结果加1</p>
</li>
</ul>
<h3 id="无符号乘法"><a href="#无符号乘法" class="headerlink" title="无符号乘法"></a>无符号乘法</h3><h3 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h3><ul>
<li>补码乘法</li>
<li>无符号和补码乘法的位级等价性</li>
</ul>
<h3 id="乘以常数"><a href="#乘以常数" class="headerlink" title="乘以常数"></a>乘以常数</h3><ul>
<li><p>乘以2的幂</p>
<p>以往，在大多数机器上，整数乘法指令相当慢， 需要10 个或者更多的时钟周期，然而其他整数运算(例如加法、减法、位级运算和移位)只需要1 个时钟周期。<br>编译器使用了一项重要的优化，试着用移位和加法运算的组合来代替乘以常数因子的乘法。<br>（所以说编程时如果数据是2的幂会更有效率）</p>
</li>
<li><p>与2的幂相乘的无符号乘法</p>
</li>
<li><p>与2 的幂相乘的补码乘法</p>
</li>
</ul>
<h3 id="除以2-的幂"><a href="#除以2-的幂" class="headerlink" title="除以2 的幂"></a>除以2 的幂</h3><ul>
<li>除以2 的幂的无符号除法</li>
<li>除以2 的幂的补码除法，向下舍入</li>
<li>除以2 的幂的补码除法，向上舍入</li>
</ul>
<h3 id="关于整数运算的最后思考"><a href="#关于整数运算的最后思考" class="headerlink" title="关于整数运算的最后思考"></a>关于整数运算的最后思考</h3><ul>
<li>实际是模运算</li>
<li>可能溢出</li>
</ul>
<h2 id="4-浮点数"><a href="#4-浮点数" class="headerlink" title="4.浮点数"></a>4.浮点数</h2><h3 id="二进制小数"><a href="#二进制小数" class="headerlink" title="二进制小数"></a>二进制小数</h3><h3 id="IEEE浮点表示"><a href="#IEEE浮点表示" class="headerlink" title="IEEE浮点表示"></a>IEEE浮点表示</h3><ul>
<li><p>符号</p>
<p>负数(s=1) 还是正数(s=0)</p>
</li>
<li><p>尾数</p>
</li>
<li><p>阶码</p>
<p>阶码的值决定了这个数是规格化的、非规格化的或特殊值</p>
<ul>
<li><p>规格化的值</p>
<p>当exp 的位模式既不全为0( 数值0) ，也不全为1 (单精度数值为255 ，双精度数值为2047) 时</p>
<p>e-bias</p>
<p>M = 1+f</p>
</li>
<li><p>非规格化的值</p>
<p>阶码域为全0</p>
<p>1-bias</p>
<p>M = f</p>
</li>
<li><p>特殊值</p>
<p>当阶码全为1</p>
</li>
</ul>
</li>
</ul>
<h3 id="数字示例"><a href="#数字示例" class="headerlink" title="数字示例"></a>数字示例</h3><ul>
<li>单精度与双精度</li>
<li>整数值转换为浮点形式</li>
</ul>
<h3 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h3><ul>
<li><p>向最接近的值舍入</p>
<p>也称向偶数舍入<br>它将数字向上或者向下舍入，使得结果的<br>最低有效数字是偶数。</p>
</li>
<li><p>向零舍入</p>
</li>
<li><p>向下舍入</p>
</li>
<li><p>向上舍入</p>
</li>
</ul>
<h3 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h3><h3 id="C语言中的浮点数"><a href="#C语言中的浮点数" class="headerlink" title="C语言中的浮点数"></a>C语言中的浮点数</h3><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2>]]></content>
      <categories>
        <category>深入理解计算机系统</category>
      </categories>
      <tags>
        <tag>信息表示</tag>
      </tags>
  </entry>
  <entry>
    <title>DSP_TMS320C66XX_DDR3配置</title>
    <url>/2021/04/26/DSP-TMS320C66XX-DDR3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="DSP-TMS320C66XX-DDR3配置"><a href="#DSP-TMS320C66XX-DDR3配置" class="headerlink" title="DSP_TMS320C66XX_DDR3配置"></a>DSP_TMS320C66XX_DDR3配置</h1><h2 id="DSP-DDR3配置一般分为五个步骤："><a href="#DSP-DDR3配置一般分为五个步骤：" class="headerlink" title="DSP DDR3配置一般分为五个步骤："></a>DSP DDR3配置一般分为五个步骤：</h2><ol>
<li>头文件部分：主要是相关操作的寄存器地址和内存操作地址的宏定义。</li>
<li>KICK的解锁和DDR3的时钟配置（PLL2）：这个操作必须要在DDR3内存控制器与DRAM的初始化之前完成。</li>
<li>LEVEING寄存器的配置：通过相应的寄存器配置完成读与写的LEVELING。</li>
<li>基本寄存器与DRAM的配置：通过相应寄存器的配置完成时间参数和模式选择参数的配置。</li>
<li>LEVELING的执行：通过相应寄存器的配置完成读与写的LEVELING的执行。</li>
</ol>
<h2 id="头文件部分"><a href="#头文件部分" class="headerlink" title="头文件部分"></a>头文件部分</h2><p>头文件部分的定义与DSP的型号有关系，分两组：the Combined Fixed Ratio Register DSPs and the Expanded Fixed Ratio Register DSPs。</p>
<table>
<thead>
<tr>
<th>Group</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Combined Fixed Ratio Register DSPs</td>
<td>TCI6602<br/>TCI6604<br/>TCI6608<br/>TCI6616<br/>TCI6618<br/>C6670<br/>C6671<br/>C6672<br/>C6674<br/>C6678</td>
</tr>
<tr>
<td>Expanded Fixed Ratio Register DSPs</td>
<td>TCI6612<br/>TCI6613<br/>TCI6614<br/>C6654<br/>C6655<br/>C6657</td>
</tr>
</tbody></table>
<p>Combined Fixed Ratio Register DSPs 头文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_BASE_ADDR (0x21000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDCFG (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000008))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDRFC (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000010))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDTIM1 (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000018))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDTIM2 (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000020))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDTIM3 (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000028))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_PMCTL (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000038))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RDWR_LVL_RMP_WIN (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000D4))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RDWR_LVL_RMP_CTRL (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000D8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RDWR_LVL_CTRL (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000DC))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_ZQCFG (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000C8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_PHYCTRL (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000E4))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3PLLCTL0 (*(unsigned int*)(0x02620330))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3PLLCTL1 (*(unsigned int*)(0x02620334))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA0_WRLVL_INIT_RATIO (*(unsigned int*)(0x0262040C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA1_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620410))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA2_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620414))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA3_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620418))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA4_WRLVL_INIT_RATIO (*(unsigned int*)(0x0262041C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA5_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620420))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA6_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620424))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA7_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620428))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA8_WRLVL_INIT_RATIO (*(unsigned int*)(0x0262042C))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA0_GTLVL_INIT_RATIO (*(unsigned int*)(0x0262043C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA1_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620440))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA2_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620444))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA3_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620448))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA4_GTLVL_INIT_RATIO (*(unsigned int*)(0x0262044C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA5_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620450))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA6_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620454))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA7_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620458))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA8_GTLVL_INIT_RATIO (*(unsigned int*)(0x0262045C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_0 (*(unsigned int*)(0x02620404))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_1 (*(unsigned int*)(0x02620408))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_12 (*(unsigned int*)(0x02620434))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_23 (*(unsigned int*)(0x02620460))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_24 (*(unsigned int*)(0x02620464))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK0 (*(unsigned int*)(0x2620038))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK1 (*(unsigned int*)(0x262003C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK0_UNLOCK 0x83E70B13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK1_UNLOCK 0x95A4F1E0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK0_LOCK 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK1_LOCK 0</span></span><br></pre></td></tr></table></figure>

<p>Expanded Fixed Ratio Register Sample Header 头文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_BASE_ADDR (0x21000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDCFG (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000008))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDRFC (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000010))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDTIM1 (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000018))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDTIM2 (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000020))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_SDTIM3 (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000028))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_PMCTL (*(unsigned int*)(DDR3_BASE_ADDR + 0x00000038))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RDWR_LVL_RMP_WIN (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000D4))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RDWR_LVL_RMP_CTRL (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000D8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RDWR_LVL_CTRL (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000DC))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_ZQCFG (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000C8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR_PHYCTRL (*(unsigned int*)(DDR3_BASE_ADDR + 0x000000E4))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3PLLCTL0 (*(unsigned int*)(0x02620330))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3PLLCTL1 (*(unsigned int*)(0x02620334))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA0_WRLVL_INIT_RATIO (*(unsigned int*)(0x0262040C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA1_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620410))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA2_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620414))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA3_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620418))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA4_WRLVL_INIT_RATIO (*(unsigned int*)(0x0262041C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA5_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620420))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA6_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620424))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA7_WRLVL_INIT_RATIO (*(unsigned int*)(0x02620428))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA8_WRLVL_INIT_RATIO (*(unsigned int*)(0x0262042C))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA0_GTLVL_INIT_RATIO (*(unsigned int*)(0x0262043C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA1_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620440))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA2_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620444))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA3_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620448))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA4_GTLVL_INIT_RATIO (*(unsigned int*)(0x0262044C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA5_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620450))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA6_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620454))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA7_GTLVL_INIT_RATIO (*(unsigned int*)(0x02620458))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA8_GTLVL_INIT_RATIO (*(unsigned int*)(0x0262045C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_0 (*(unsigned int*)(0x02620404))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_12 (*(unsigned int*)(0x02620434))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_23 (*(unsigned int*)(0x02620460))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_24 (*(unsigned int*)(0x02620464))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_52 (*(unsigned int*)(0x026204D4))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_53 (*(unsigned int*)(0x026204D8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_54 (*(unsigned int*)(0x026204DC))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_55 (*(unsigned int*)(0x026204E0))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_56 (*(unsigned int*)(0x026204E4))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_57 (*(unsigned int*)(0x026204E8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_58 (*(unsigned int*)(0x026204EC))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_59 (*(unsigned int*)(0x026204F0))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DDR3_CONFIG_REG_60 (*(unsigned int*)(0x026204F4))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK0 (*(unsigned int*)(0x2620038))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK1 (*(unsigned int*)(0x262003C))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK0_UNLOCK 0x83E70B13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK1_UNLOCK 0x95A4F1E0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK0_LOCK 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KICK1_LOCK 0</span></span><br></pre></td></tr></table></figure>

<h2 id="PLL配置"><a href="#PLL配置" class="headerlink" title="PLL配置"></a>PLL配置</h2><p>DDR3内存时钟速率是数据速率的一半（DDR3-1333数据操作在666.67MHz时钟下）。（PLL2_PLLD在官方例程中给的是2，但是在我们自己的板子上跑得时候给4才出了正确的图。）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果图像不对降频处理</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLL2_PLLD 4 <span class="comment">// Must be less than 64 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PLL2_PLLM 39 <span class="comment">// Must be less than 4096  </span></span></span><br><span class="line"></span><br><span class="line">KICK0 = KICK0_UNLOCK;</span><br><span class="line">KICK1 = KICK1_UNLOCK;</span><br><span class="line">DDR3PLLCTL1 |= <span class="number">0x00000040</span>; <span class="comment">// Set ENSAT bit = 1</span></span><br><span class="line">DDR3PLLCTL0 |= <span class="number">0x00800000</span>; <span class="comment">// Set BYPASS bit = 1</span></span><br><span class="line"><span class="comment">// Clear and program PLLD field</span></span><br><span class="line">DDR3PLLCTL0 &amp;= ~(<span class="number">0x0000003F</span>);</span><br><span class="line">DDR3PLLCTL0 |= (PLL2_PLLD &amp; <span class="number">0x0000003F</span>);</span><br><span class="line"><span class="comment">// Clear and program PLLM field</span></span><br><span class="line">DDR3PLLCTL0 &amp;= ~(<span class="number">0x0007FFC0</span>);</span><br><span class="line">DDR3PLLCTL0 |= ((PLL2_PLLM &lt;&lt; <span class="number">6</span>) &amp; <span class="number">0x0007FFC0</span> );</span><br><span class="line"><span class="comment">// Clear and program BWADJ field</span></span><br><span class="line">temp = ((PLL2_PLLM + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">DDR3PLLCTL0 &amp;= ~(<span class="number">0xFF000000</span>);</span><br><span class="line">DDR3PLLCTL1 &amp;= ~(<span class="number">0x0000000F</span>);</span><br><span class="line">DDR3PLLCTL0 |= ((temp &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xFF000000</span>);</span><br><span class="line">DDR3PLLCTL1 |= ((temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x0000000F</span>);</span><br><span class="line">DDR3PLLCTL1 |= <span class="number">0x00002000</span>; <span class="comment">// Set RESET bit = 1</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++); <span class="comment">// Wait at least 5us for reset complete</span></span><br><span class="line">DDR3PLLCTL1 &amp;= ~(<span class="number">0x00002000</span>); <span class="comment">// Clear RESET bit</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">70000</span>;i++); <span class="comment">// Wait at least 50us for PLL lock</span></span><br><span class="line">DDR3PLLCTL0 &amp;= ~(<span class="number">0x00800000</span>); <span class="comment">// Clear BYPASS bit = 0</span></span><br></pre></td></tr></table></figure>

<h2 id="LEVEING寄存器的配置"><a href="#LEVEING寄存器的配置" class="headerlink" title="LEVEING寄存器的配置"></a>LEVEING寄存器的配置</h2><p>UNLOCK寄存器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">KICK0 = KICK0_UNLOCK;</span><br><span class="line">KICK1 = KICK1_UNLOCK;</span><br></pre></td></tr></table></figure>

<p>Chip-level寄存器的初始化配置leveling电路值的操作必须在基本寄存器初始化配置和DRAM初始化配置之前。这些值写入DDR3_CONFIG_REG_0和DDR3_CONFIG_REG_12中。根据leveling 过程的选择，需要往相应的leveling寄存器中写入leveling值。Combined Fixed Ratio Register DSPs需要往DDR3_CONFIG_REG_23中写值，同样的，Expanded Fixed Ratio Register DSPs需要往DDR3_CONFIG_REG_53写值。另外，当data lanes通过自动leveling时，LEVELING初始化值必须写入到WRLVL_INIT_RATIO寄存器组和GATELVL_INIT_RATIO寄存器组。</p>
<p>首先，INVERT_CLKOUT是需要配置的一个值。其配置在DDR3_CONFIG_REG_12配置寄存器中。注意：若是INVERT_CLKOUT位被设置为1，那么DDR3_CONFIG_REG_0寄存器中的CTRL_SLAVE_RATIO位必须设置为0x100；若是INVERT_CLKOUT位一直保持为0，那么CTRL_SLAVE_RATIO的值应该为0x80。而DDR3_CONFIG_REG_0中的DLL_LOCK_DIFF位应该保持为0XF。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DDR3_CONFIG_REG_0 &amp;= ~(<span class="number">0x007FE000</span>); <span class="comment">// clear ctrl_slave_ratio field</span></span><br><span class="line">DDR3_CONFIG_REG_0 |= <span class="number">0x00200000</span>; <span class="comment">// set ctrl_slave_ratio to 0x100</span></span><br><span class="line">DDR3_CONFIG_REG_12 |= <span class="number">0x08000000</span>; <span class="comment">// Set invert_clkout = 1</span></span><br><span class="line"></span><br><span class="line">DDR3_CONFIG_REG_0 |= <span class="number">0xF</span>; <span class="comment">// set dll_lock_diff to 15</span></span><br><span class="line"></span><br><span class="line">DDR3_CONFIG_REG_23 |= <span class="number">0x00000200</span>;   </span><br></pre></td></tr></table></figure>

<p>根据板子实际布线参数设置leveling初始值（根据TI给的表格DDR3 PHY Calc.xlsx来计算，表格中黄色部分表示可输入）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DATA0_WRLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA1_WRLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA2_WRLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA3_WRLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA4_WRLVL_INIT_RATIO = <span class="number">0x5C</span>;</span><br><span class="line">DATA5_WRLVL_INIT_RATIO = <span class="number">0x5C</span>;</span><br><span class="line">DATA6_WRLVL_INIT_RATIO = <span class="number">0x4D</span>;</span><br><span class="line">DATA7_WRLVL_INIT_RATIO = <span class="number">0x4D</span>;</span><br><span class="line">DATA8_WRLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line">DATA0_GTLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA1_GTLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA2_GTLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA3_GTLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br><span class="line">DATA4_GTLVL_INIT_RATIO = <span class="number">0x92</span>;</span><br><span class="line">DATA5_GTLVL_INIT_RATIO = <span class="number">0x92</span>;</span><br><span class="line">DATA6_GTLVL_INIT_RATIO = <span class="number">0x84</span>;</span><br><span class="line">DATA7_GTLVL_INIT_RATIO = <span class="number">0x84</span>;</span><br><span class="line">DATA8_GTLVL_INIT_RATIO = <span class="number">0x00</span>;</span><br></pre></td></tr></table></figure>

<p>将PHY_RESET设置一个脉冲（0-&gt;1-&gt;0），这样就可将leveling配置值写入到PHY逻辑中（相当于一个PHY复位操作）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DDR_PHYCTRL &amp;= ~(<span class="number">0x00008000</span>);</span><br><span class="line">DDR_PHYCTRL |= (<span class="number">0x00008000</span>);</span><br><span class="line">DDR_PHYCTRL &amp;= ~(<span class="number">0x00008000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="基本寄存器与DRAM的配置"><a href="#基本寄存器与DRAM的配置" class="headerlink" title="基本寄存器与DRAM的配置"></a>基本寄存器与DRAM的配置</h2><p>基本寄存器与DRAM的初始化配置包括DDR3控制器严格时间寄存器参数和DRAM模式寄存器参数的读写。DSP的DDR3控制器数据手册和外接DRAM的数据手册中提到的特新和这两个参数密切相关。DDR3 Register Calc表格用来选择连接不同SDRAM时的严格时间寄存器配置值。还有几个和DRAM相关的参数必须在寄存器SDCFG中配置，包括板子上连接SDRAM时电阻值以及外接SDRAM的大小参数，他们会影响DSP的DDR3内存接口和SDRAM的模式寄存器中的配置值。    </p>
<p>DDR_SDRFC寄存器控制DDR3的刷新行为。为了让DDR3很好的初始化，其刷新间隔必须为31.25us而不是正常运行时的7.8us，这样可以创造一个500us的初始化CKE low。如下表示将刷新周期31.24us写入DDR_SDRFC[15:0]（666.67*31.25）。这时DDR_SDRFC的MSB位应该清零。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DDR_SDRFC = <span class="number">0x00005161</span>;</span><br></pre></td></tr></table></figure>

<p>DDR_SDTIM包含很多和DRAM和控制器的时间配置参数，根据寄存器描述将计算好的寄存器中对应位写入其中，可以根据表格DDR3 Register Calc计算（选择DDR的型号，然后根据需要设置参数）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DDR_SDTIM1 = <span class="number">0x1113783C</span>;</span><br><span class="line">DDR_SDTIM2 = <span class="number">0x304F7FE3</span>;</span><br><span class="line">DDR_SDTIM3 = <span class="number">0x559F849F</span>;</span><br></pre></td></tr></table></figure>

<p>DDR_PHYCTRL寄存器被称为DDR_PHY_CTRL_1或者DDR_PHYC，其低5位配置读数据延迟。读延迟是基于设备延迟的，一个保守的是CL+3，这样可以使得控制器有4个时钟延迟操作周期。</p>
<p>DDR_ZQCFG寄存器配置校验电阻的调节能力，基于240欧姆的电阻连接在DRAM上，使得DRAM可以适当调整其温度漂移。每100msZQ校验会发生一次。</p>
<p>PMCTL是电源管理控制寄存器，写0表示禁止电源管理。通过电源管理控制，可以实现延时配置，类型服务配置，中断使能配置，EEC控制配置。</p>
<p>（上面三个寄存器都是从TI的6657 STK工程中的DDR初始化文件复制得来，代码如下）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DDR_PHYCTRL  = <span class="number">0x0010010F</span>;</span><br><span class="line"></span><br><span class="line">DDR_ZQCFG    = <span class="number">0x70074c1f</span>; </span><br><span class="line"></span><br><span class="line">DDR_PMCTL    = <span class="number">0x0</span>;</span><br></pre></td></tr></table></figure>

<p>DDR_ SDCFG完成控制器的配置，当DDR_SDRFC中的MSB位被清零时硬件配置DRAM设备立马执行。根据表格DDR3 Register Calc计算（选择DDR的型号，然后根据需要设置参数）特别需要注意的是，Page size 的单位是W（字），1KB = 256 字，2KB = 512字。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DDR_SDCFG   = <span class="number">0x63067BB1</span>;</span><br></pre></td></tr></table></figure>

<p>需要一个延时循环来使得以上的DDR3初始化过程能够完成，最少600us，当DDR3完成初始化后，其刷新速率应该恢复到正常状态7.8us。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++);</span><br><span class="line"></span><br><span class="line">DDR_SDRFC = <span class="number">0x00001458</span>;</span><br></pre></td></tr></table></figure>

<h2 id="LEVELING的执行"><a href="#LEVELING的执行" class="headerlink" title="LEVELING的执行"></a>LEVELING的执行</h2><p>LEVELING的执行指的是触发刚刚寄存器的读写。初始化的读写leveling的循环使得PHY中DDR byte lanes实现数据转移。有三种DDR PHY读写leveling操作方式：</p>
<ol>
<li><p>固定的leveing </p>
</li>
<li><p>局部自动leveling</p>
</li>
<li><p>全部自动leveling</p>
</li>
</ol>
<p>RDWR_LVL_CTRL和RDWR_LVL_RMP_CTRL这两个寄存器配置LEVELING的触发，（这部分也是参考的STK）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">RDWR_LVL_RMP_CTRL = <span class="number">0x80000000</span>; <span class="comment">//enable full leveling</span></span><br><span class="line"></span><br><span class="line">RDWR_LVL_CTRL = <span class="number">0x80000000</span>; <span class="comment">//Trigger full leveling - This ignores read DQS leveling result and uses ratio forced value  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3000</span>;i++);</span><br></pre></td></tr></table></figure>

<h2 id="KICK寄存器"><a href="#KICK寄存器" class="headerlink" title="KICK寄存器"></a>KICK寄存器</h2><p>在执行完DDR3控制器的配置后，KICK寄存器应该锁存。其操作可以是DDR3配置后立马执行，也可以在其他内存区域完成包含之后执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">KICK0 = KICK0_LOCK; <span class="comment">//lock kicker registers</span></span><br><span class="line">KICK1 = KICK1_LOCK;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DSP</category>
      </categories>
      <tags>
        <tag>DDR3</tag>
      </tags>
  </entry>
  <entry>
    <title>程序的机器级表示</title>
    <url>/2021/04/27/%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="程序的机器级表示"><a href="#程序的机器级表示" class="headerlink" title="程序的机器级表示"></a>程序的机器级表示</h1><h2 id="1-历史观点"><a href="#1-历史观点" class="headerlink" title="1.历史观点"></a>1.历史观点</h2><h2 id="2-程序编码"><a href="#2-程序编码" class="headerlink" title="2.程序编码"></a>2.程序编码</h2><h3 id="机器级代码"><a href="#机器级代码" class="headerlink" title="机器级代码"></a>机器级代码</h3><ul>
<li><p>指令集体系结构</p>
<p>定义机器级程序的格式和行为，它定义了处理器状态、指令的格式，以及每条指令对状态的影响</p>
</li>
<li><p>内存地址是虚拟地址</p>
<p>提供的内存模型看上去是一个非常大的字节数组</p>
</li>
<li><p>程序计数器（%rip）</p>
<p>给出将要执行的下一条指令在内存中的地址。</p>
</li>
<li><p>整数寄存器文件</p>
</li>
<li><p>条件码寄存器</p>
</li>
<li><p>向量寄存器</p>
</li>
</ul>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><ul>
<li>反汇编器</li>
<li>链接器</li>
</ul>
<h3 id="关于格式的注解"><a href="#关于格式的注解" class="headerlink" title="关于格式的注解"></a>关于格式的注解</h3><h2 id="3-数据格式"><a href="#3-数据格式" class="headerlink" title="3.数据格式"></a>3.数据格式</h2><h3 id="字（16位）"><a href="#字（16位）" class="headerlink" title="字（16位）"></a>字（16位）</h3><p>大多数GCC 生成的汇编代码指令都有一个字符的后缀，表明操作数的大小。</p>
<h2 id="4-访问信息"><a href="#4-访问信息" class="headerlink" title="4.访问信息"></a>4.访问信息</h2><p>一个x86-64 的中央处理单元(CPU) 包含一组16 个存储64 位值的通用目的寄存器。这些寄存器用来存储整数数据和指针。<br>%rax 到 %rbp，%r8 到 %r15 。</p>
<p>栈指针%rsp，用来指明运行时栈的结束位置</p>
<p>当这些指令以寄存器作为目标时，对于生成小于8 字节结果的指令，对此有两条规则:<br>生成1 字节和2 字节数字的指令会保持剩下的字节不变;<br>生成4 字节数字的指令会把高位4 个字节置为0 。</p>
<h3 id="操作数-operand-指示符"><a href="#操作数-operand-指示符" class="headerlink" title="操作数(operand)指示符"></a>操作数(operand)指示符</h3><p>指示出执行一个操作中要使用的源数据<br>值，以及放置结果的目的位置。</p>
<ul>
<li><p>立即数</p>
<p>表示常数值<br>立即数的书写方式是， $后面跟一个用标准C 表示法表示的整数，比如， $-577 或$0x1f</p>
</li>
<li><p>寄存器</p>
<p>用符号ra 来表示任意寄存器a ，用引用R[ra]来表示它的值</p>
</li>
<li><p>内存引用</p>
<p>会根据计算出来的地址(通常称为有效地址)访问某个内存位置。<br>Mb[Addr] 表示对存储在内存中从地址Addr 开始的b 个字节值的引用</p>
<ul>
<li><p>寻址模式</p>
<p>允许不同形式的内存引用<br>表中底部用语法<br>Imm( rb,ri,s) 表示的是最常用的形式</p>
<p>一个立即数偏移lmm ， 一个基址寄存器rb，一个变址寄存器ri 和一个比例因子s，这里s 必须是1 、2 、4 或者8。基址和变址寄存器都必须是64 位寄存器。有效地址被计算为<br>Imm+ R[ rb] +R[ri] * s 。<br>引用数组元素时，会用到这种通用形式。其他形式都是这种通用形式的特殊情况，只是省略了某些部分。</p>
</li>
</ul>
</li>
</ul>
<h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><p>最频繁使用的指令是将数据从一个位置复制到另一个位置的指令。</p>
<ul>
<li><p>MOV类</p>
<p>MOV   S ,  D</p>
<p>movb （1字节）<br>movw  （2字节）<br>movl  （4字节） 以寄存器为目的时，会把高位4字节置0<br>movq  （8字节）</p>
<p>源操作数指定的值是一个立即数，存储在寄存器中或者内存中。<br>目的操作数指定一个位置，要么是一个寄存器或者，要么是一个内存地址。<br>传送指令的两个操作数不能都指向内存位置。</p>
<ul>
<li>MOVZ类</li>
<li>MOVS类</li>
</ul>
</li>
</ul>
<h3 id="压入和弹出栈数据"><a href="#压入和弹出栈数据" class="headerlink" title="压入和弹出栈数据"></a>压入和弹出栈数据</h3><ul>
<li><p>四字（64位）压栈</p>
<p>栈指针减 8，将新的值写到栈顶</p>
</li>
<li><p>四字出栈</p>
<p>从栈顶读出数据，然后栈指针加 8</p>
</li>
</ul>
<h2 id="5-算术和逻辑"><a href="#5-算术和逻辑" class="headerlink" title="5.算术和逻辑"></a>5.算术和逻辑</h2><p>操作对象：字节、字、双字、四字<br>操作类型：加载有效地址、一元操作、二元操作、移位</p>
<h3 id="加载有效地址（leaq）"><a href="#加载有效地址（leaq）" class="headerlink" title="加载有效地址（leaq）"></a>加载有效地址（leaq）</h3><p>movq指令的变形，它的第一个操作数看上去是一个内存引用，但该指令并不是从指定的位置读人数据，而是将有效地址写入到目的操作数。</p>
<h3 id="一元操作和二元操作"><a href="#一元操作和二元操作" class="headerlink" title="一元操作和二元操作"></a>一元操作和二元操作</h3><h3 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h3><h3 id="特殊的算术操作"><a href="#特殊的算术操作" class="headerlink" title="特殊的算术操作"></a>特殊的算术操作</h3><p>乘<br>除</p>
<h2 id="6-控制"><a href="#6-控制" class="headerlink" title="6.控制"></a>6.控制</h2><h3 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h3><p>CF：进位标志<br>ZF：零标志<br>SF：符号标志<br>OF：溢出标志<br>比较和测试指令</p>
<h3 id="访问条件码"><a href="#访问条件码" class="headerlink" title="访问条件码"></a>访问条件码</h3><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p>直接跳转<br>间接跳转</p>
<h3 id="跳转指令的编码"><a href="#跳转指令的编码" class="headerlink" title="跳转指令的编码"></a>跳转指令的编码</h3><h3 id="用条件控制来实现条件分支"><a href="#用条件控制来实现条件分支" class="headerlink" title="用条件控制来实现条件分支"></a>用条件控制来实现条件分支</h3><p>通常使用，但是低效</p>
<h3 id="用条件传送来实现条件分支"><a href="#用条件传送来实现条件分支" class="headerlink" title="用条件传送来实现条件分支"></a>用条件传送来实现条件分支</h3><p>比条件控制高效，因为流水线、分支预测<br>但是受限，能使用的地方较少</p>
<h3 id="循环（条件测试-跳转）"><a href="#循环（条件测试-跳转）" class="headerlink" title="循环（条件测试 + 跳转）"></a>循环（条件测试 + 跳转）</h3><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><h2 id="7-过程"><a href="#7-过程" class="headerlink" title="7.过程"></a>7.过程</h2><p>过程的形式：函数、方法、子例程、处理函数等<br>过程的机器级支持：传递控制、传递数据、分配和释放内存</p>
<h3 id="运行时栈"><a href="#运行时栈" class="headerlink" title="运行时栈"></a>运行时栈</h3><p>栈帧</p>
<h3 id="转移控制"><a href="#转移控制" class="headerlink" title="转移控制"></a>转移控制</h3><p>call</p>
<h3 id="数据传送"><a href="#数据传送" class="headerlink" title="数据传送"></a>数据传送</h3><p>参数数量小于等于6，寄存器<br>大于6，需要用到栈</p>
<h3 id="栈上的局部存储"><a href="#栈上的局部存储" class="headerlink" title="栈上的局部存储"></a>栈上的局部存储</h3><p>有些时候，局部数据必须放在内存中<br>a .数量大于6<br>b. 用到了&amp;<br>c. 数组或结构</p>
<h3 id="寄存器中的局部存储空间"><a href="#寄存器中的局部存储空间" class="headerlink" title="寄存器中的局部存储空间"></a>寄存器中的局部存储空间</h3><p>被调用者保存寄存器，rbx  ,rbp  ,  r12~r15<br>调用者保存寄存器</p>
<h3 id="递归过程"><a href="#递归过程" class="headerlink" title="递归过程"></a>递归过程</h3><h2 id="8-数组分配和访问"><a href="#8-数组分配和访问" class="headerlink" title="8.数组分配和访问"></a>8.数组分配和访问</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><p>Xa+L*i</p>
<h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><h3 id="嵌套的数组"><a href="#嵌套的数组" class="headerlink" title="嵌套的数组"></a>嵌套的数组</h3><p>T D[R] [C];<br>&amp;D[ i ][ j ] = Xd +L（C*i +j )<br>C是列，L是一个数组数据包含 L 个字节</p>
<h3 id="定长数组"><a href="#定长数组" class="headerlink" title="定长数组"></a>定长数组</h3><h3 id="变长数组"><a href="#变长数组" class="headerlink" title="变长数组"></a>变长数组</h3><h2 id="9-异质的数据结构"><a href="#9-异质的数据结构" class="headerlink" title="9.异质的数据结构"></a>9.异质的数据结构</h2><p>结构（struct）<br>联合（union）</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><h3 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h3><h3 id="数据对齐"><a href="#数据对齐" class="headerlink" title="数据对齐"></a>数据对齐</h3><h2 id="10-将控制与数据结合起来"><a href="#10-将控制与数据结合起来" class="headerlink" title="10.将控制与数据结合起来"></a>10.将控制与数据结合起来</h2><h3 id="理解指针"><a href="#理解指针" class="headerlink" title="理解指针"></a>理解指针</h3><ul>
<li><p>每个指针都对应一个类型</p>
</li>
<li><p>每个指针都有一个值</p>
</li>
<li><p>指针用 &amp; 运算符创建</p>
</li>
<li><ul>
<li>操作符用于间接引用指针</li>
</ul>
</li>
<li><p>数组与指针紧密联系</p>
</li>
<li><p>指针的强制转换</p>
<p>只改变类型，不改变值<br>char *p<br>(int *)p + 7    ———— p + 28<br>(int *)（p + 7）    ——   p + 7</p>
</li>
<li><p>指针也可以指向函数</p>
<p>int （*f )(int *)  从f开始往外读，指向以int *为参数并返回int的函数指针<br>int * f(int *)  声明了一个函数，以int *为参数，并返回一个int *</p>
</li>
</ul>
<h3 id="GDB调试器"><a href="#GDB调试器" class="headerlink" title="GDB调试器"></a>GDB调试器</h3><h3 id="内存越界引用和缓冲区溢出"><a href="#内存越界引用和缓冲区溢出" class="headerlink" title="内存越界引用和缓冲区溢出"></a>内存越界引用和缓冲区溢出</h3><h3 id="对抗缓冲区溢出攻击"><a href="#对抗缓冲区溢出攻击" class="headerlink" title="对抗缓冲区溢出攻击"></a>对抗缓冲区溢出攻击</h3><ul>
<li>栈随机化</li>
<li>栈破坏检测</li>
<li>限制可执行代码区域</li>
</ul>
<h3 id="支持变长栈帧"><a href="#支持变长栈帧" class="headerlink" title="支持变长栈帧"></a>支持变长栈帧</h3><p>栈指针（没看明白，累了）</p>
<h2 id="11-浮点代码"><a href="#11-浮点代码" class="headerlink" title="11.浮点代码"></a>11.浮点代码</h2><p>% ymm0 ~ % ymm15<br>% xmm0 ~ % xmm15</p>
<h3 id="浮点传送和转换操作"><a href="#浮点传送和转换操作" class="headerlink" title="浮点传送和转换操作"></a>浮点传送和转换操作</h3><h3 id="过程中的浮点代码"><a href="#过程中的浮点代码" class="headerlink" title="过程中的浮点代码"></a>过程中的浮点代码</h3><h3 id="浮点运算操作"><a href="#浮点运算操作" class="headerlink" title="浮点运算操作"></a>浮点运算操作</h3><h3 id="定义和使用浮点常数"><a href="#定义和使用浮点常数" class="headerlink" title="定义和使用浮点常数"></a>定义和使用浮点常数</h3><h3 id="在浮点代码中使用位级操作"><a href="#在浮点代码中使用位级操作" class="headerlink" title="在浮点代码中使用位级操作"></a>在浮点代码中使用位级操作</h3><h3 id="浮点比较操作"><a href="#浮点比较操作" class="headerlink" title="浮点比较操作"></a>浮点比较操作</h3>]]></content>
      <categories>
        <category>深入理解计算机系统</category>
      </categories>
      <tags>
        <tag>机器级代码</tag>
      </tags>
  </entry>
  <entry>
    <title>PCI总线设备</title>
    <url>/2021/04/24/PCI%E6%80%BB%E7%BA%BF%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<h1 id="PCI总线设备"><a href="#PCI总线设备" class="headerlink" title="PCI总线设备"></a>PCI总线设备</h1><h2 id="PCI总线"><a href="#PCI总线" class="headerlink" title="PCI总线"></a>PCI总线</h2><p>​       PCI是外围设备互连（Peripheral Component Interconnect）的简称，作为一种通用的总线标准接口。</p>
<p>​       PCI总线具有3个非常显著的优点：</p>
<ol>
<li>在计算机和外设间传输数据时具有很好的性能</li>
<li>能够尽量独立于具体的平台</li>
<li>可以很方便地实现即插即用</li>
</ol>
<h2 id="PCI设备"><a href="#PCI设备" class="headerlink" title="PCI设备"></a>PCI设备</h2><p>​       PCI总线架构中可以包含多个PCI设备，由于一个PCI接口卡上可能包含多个功能模块，每个模块都被当做独立的逻辑设备。因此，每个PCI功能即PCI逻辑设备都唯一地对应一个pci_dev设备描述符，该结构体的具体定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pci_dev</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">global_list</span>;</span></span><br><span class="line">    <span class="comment">/*全局链表元素globa_list:每一个pci_dev结构都通过该成员连接到全局pci设备pci_devices中*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">bus_list</span>;</span></span><br><span class="line">    <span class="comment">/*总线列表元素bus_list:每一个pci_dev结构除了连接到全局设备链表中，还会通过这个成员连接到其所属PCI总线的设备列表中。每一条PCI总线都维护一条自己的设备链表视图，以便描述所有连接在该PCI总线上的设备，其表头由PC总线的pci_bus结构中的devices成员所描述。 */</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pci_bus</span> * <span class="title">bus</span>;</span></span><br><span class="line">    <span class="comment">/*总线指针bus:指向这个PCI设备所在的PCI总线的pci_bus结构。因此，对于桥设备，bus指针将指向桥设备的主总线（primary bus），也即指向桥设备所在的PCI总线。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pci_bus</span> * <span class="title">subordinate</span>;</span></span><br><span class="line">    <span class="comment">/*指针subordinate：指向这个PCI设备所桥接的下级总线。这个指针仅对桥设备有意义，对于一般的非桥PC设备，该指针成员总是为NULL。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> * sysdata;</span><br><span class="line">    <span class="comment">/*无类型指针sysdata：指向一片特定于系统的扩展数据。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pro_dir_entry</span> * <span class="title">procent</span>;</span></span><br><span class="line">    <span class="comment">/*指针procent：指向该PCI设备在/proc文件系统中对应的目录项。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> devfn;</span><br><span class="line">    <span class="comment">/*devfn：PCI设备的设备功能号，也称PCI逻辑设备号（0~255）。其中bit[7:3]是物理设备号（取值范围0~31），其中bit[2:0]是功能号（取值范围0~7）。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> vendor;</span><br><span class="line">    <span class="comment">/*vendor：16位无符号整数，表示PCI设备的厂商ID。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> device;</span><br><span class="line">    <span class="comment">/*vendor：16位无符号整数，表示PCI设备的设备ID。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> subsystem_vendor;</span><br><span class="line">    <span class="comment">/*subsystem_vendor：16位无符号整数，表示PCI设备的子系统厂商ID。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> subsystem_device;</span><br><span class="line">    <span class="comment">/*subsystem_device：16位无符号整数，表示PCI设备的子系统设备ID。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">    <span class="comment">/*class：32位的无符号整数，表示该PCI设备的类别，其中bit[7:0]为编程接口，bit[15:8]为子类别代码，bit[23:16]为基类别代码，bit[31:24]无意义。显然，class成员的低3位字节刚好对应于PCI配置空间中的类代码。*/</span></span><br><span class="line">    </span><br><span class="line">    u8 hdr_type;</span><br><span class="line">    <span class="comment">/*hdr_type：8位无符号整数，表示PCI配置空间头部的类型。其中，bit[7]=1表示多功能设备，bit[7]=0表示单功能设备。bit[6:0]表示PCI控制空间头部的布局类型，值00h表示一般PCI设备的配置空间头部，值01h表示PCI-to-PCI桥的配置空间头部，值02h表示CardBus桥的配置空间头部。*/</span></span><br><span class="line">    </span><br><span class="line">    u8 rom_base_reg;</span><br><span class="line">    <span class="comment">/*rom_base_reg：8位无符号整数，表示PCI配置空间中的ROM基地址寄存器在PCI配置空间中的位置。ROM基地址寄存器在不同类型的PCI配置空间头部的位置是不一样的，对于type0的配置空间布局，ROM基地址寄存器的起始位置是30h；对于PCI-to-PCI桥所用的type1配置空间布局，ROM基地址寄存器的起始位置是38h。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pci_driver</span> * <span class="title">driver</span>;</span></span><br><span class="line">    <span class="comment">/*指针driver：指向这个PCI设备所对应的驱动程序定义的pci_driver结构。每一个pci设备驱动程序都必须对定义自己的pci_driver结构进行描述。*/</span></span><br><span class="line">    </span><br><span class="line">    u64 dma_mask;</span><br><span class="line">    <span class="comment">/*dma_mask：用于DMA的总线地址掩码，一般来说，这个成员的值是0xffffffff。数据类型dma_attr_t定义在</span></span><br><span class="line"><span class="comment">    include/asm/types.h中，在x86平台上，dma_attr_t类型就是u32类型。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pci_power_t</span> current_state;</span><br><span class="line">    <span class="comment">/*当前操作状态*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> <span class="title">dev</span>;</span></span><br><span class="line">    <span class="comment">/*通用的设备接口*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> vendor_compatible[DEVICE_COUNT_COMPATIBLE];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> device_compatible[DEVICE_COUNT_COMPATIBLE];</span><br><span class="line">    <span class="comment">/*定义这个PCI设备与哪些设备兼容*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> irq;</span><br><span class="line">    <span class="comment">/*无符号的整数irq：表示PCI设备通过哪根IRQ输入线产生中断，一般为0~15之间的某个值。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">resource</span> <span class="title">resource</span>[<span class="title">DEVICE_COUNT_RESOURCE</span>];</span></span><br><span class="line">    <span class="comment">/*表示该设备可能用到的资源，包括：I/O端口区域、设备内存地址区域及扩展ROM地址区域。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cfg_size;</span><br><span class="line">    <span class="comment">/*配置空间的大小*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> transparent:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*透明PCI桥*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> multifunction:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*多功能设备*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> enabled:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*pci_enable_device已经被调用*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> is_busmaster:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*设备是主设备*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> no_msi:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*设备不使用msi*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> block_ucfg_access:<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*配置空间访问用块的方式*/</span></span><br><span class="line">    </span><br><span class="line">    u32 saved_config_space[<span class="number">16</span>];</span><br><span class="line">    <span class="comment">/*在挂起时保存配置空间*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bin_attribute</span> * <span class="title">rom_attr</span>;</span></span><br><span class="line">    <span class="comment">/*sysfs ROM入口的属性描述*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> rom_attr_enabled;</span><br><span class="line">    <span class="comment">/*能显示rom属性*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">bin_attribute</span> * <span class="title">res_attr</span>[<span class="title">DEVICE_COUNT_RESOURCE</span>];</span></span><br><span class="line">    <span class="comment">/*资源的sysfs文件*/</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="PCI设备驱动结构"><a href="#PCI设备驱动结构" class="headerlink" title="PCI设备驱动结构"></a>PCI设备驱动结构</h1><p>​        PCI设备上有3种地址空间：PCI的I/O空间、存储空间和配置空间。CPU可以访问PCI设备上的所有地址空间，其中I/O空间和存储空间提供给设备驱动程序使用，配置空间由linux内核中的PCI初始化代码使用。内核在启动时负责对所有PCI设备进行初始化，配置好所有的PCI设备，包括中断号及I/O基址，并在文件/proc/pci中列出所有找到的PCI设备，以及这些设备的参数和属性。linux驱动程序通常使用结构（struct）表示一种设备，结构体中的变量代表某一具体设备，该变量存放了与该设备相关的所有信息。好的驱动程序应该能驱动多个同种设备，每个设备之间用次设备号进行区分，如果采用结构数据代表所有该驱动程序的设备，就可以简单的使用数组下标表示次设备号。</p>
<h2 id="pci-driver"><a href="#pci-driver" class="headerlink" title="pci_driver"></a>pci_driver</h2><p>​         这个数据结构在文件include/linux/pci.h里，这是linux内核2.4版本之后为新型的PCI设备驱动程序添加的。其中，最主要的是用于识别设备的id_table结构，以及用于检测设备的函数probe()和卸载设备的函数remove()。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct <span class="title">pci_driver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">node</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">pci_device_id</span> * <span class="title">id_table</span>;</span></span><br><span class="line">    <span class="keyword">int</span> (*probe) (struct pci_dev * dev,<span class="keyword">const</span> struct pci_device_id * id);</span><br><span class="line">    <span class="keyword">void</span> (*remove) (struct pci_dev *dev);</span><br><span class="line">    <span class="keyword">int</span> (*save_state) (struct pci_dev *dev,u32 state);</span><br><span class="line">    <span class="keyword">int</span> (*resume) (struct pci_dev *dev);</span><br><span class="line">    <span class="keyword">int</span> (*enable_wake) (struct pci_dev *dev,u32 state,<span class="keyword">int</span> enable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pci-dev"><a href="#pci-dev" class="headerlink" title="pci_dev"></a>pci_dev</h2><p>​        这个数据结构也在文件include/linuc/pci.h里，详细描述了一个PCI设备几乎所有的硬件信息，包括厂商ID、设备ID及其它各种资源。（参见PCI设备章节对该结构体的详细解释）</p>
<h1 id="PCI设备驱动实例"><a href="#PCI设备驱动实例" class="headerlink" title="PCI设备驱动实例"></a>PCI设备驱动实例</h1><h2 id="PCI设备驱动程序基本框架"><a href="#PCI设备驱动程序基本框架" class="headerlink" title="PCI设备驱动程序基本框架"></a>PCI设备驱动程序基本框架</h2><p>​        用模块方式实现PCI设备驱动程序时，通常要实现一下几个部分：初始化设备模块、设备打开模块、数据读写和控制模块、中断处理模块、设备释放模块及设备卸载模块等。下面是一个典型的PCI设备驱动程序的基本框架：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*指明该驱动程序适用于哪一些PCI设备*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">pci_device_id</span> <span class="title">demo_pci_tbl</span>[] _<span class="title">initdata</span>  =</span>   &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        PCI_VENDOR_ID_DEMO,</span><br><span class="line">        PCI_DEVICE_ID_DEMO,</span><br><span class="line">        PCI_ANY_ID,</span><br><span class="line">        PCI_ANY_ID,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        DEMO</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,&#125;</span><br><span class="line">&#125;  ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*对特定PCI设备进行描述的结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">demo_card</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> magic;</span><br><span class="line">    <span class="comment">/*使用链表保存所有同类的PCI设备*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">demo_card</span> * <span class="title">next</span>;</span></span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中断处理模块*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo_interrupt</span><span class="params">(<span class="keyword">int</span> irq,<span class="keyword">void</span>  * dev_id,struct pt_regs * regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备文件操作接口*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">demo_fops</span> =</span> &#123;</span><br><span class="line">    owner: THIS_MODULE,                      <span class="comment">//demo_fops所属的设备模块</span></span><br><span class="line">    read : demo_read,                        <span class="comment">//读设备操作</span></span><br><span class="line">    write：demo_write,                       <span class="comment">//写设备操作</span></span><br><span class="line">    ioctl: demo_ioctl,                       <span class="comment">//控制设备操作</span></span><br><span class="line">    mmap : demo_mmap,                        <span class="comment">//内存重映射操作</span></span><br><span class="line">    open : demo _open,                       <span class="comment">//打开设备操作</span></span><br><span class="line">    release : demo_release                   <span class="comment">//释放设备操作</span></span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备模块信息*/</span></span><br><span class="line"><span class="keyword">static</span>  <span class="class"><span class="keyword">struct</span> <span class="title">pci_driver</span> <span class="title">demo_pci_driver</span> =</span> &#123;</span><br><span class="line">    name:demo_MODULE_NAME,                   <span class="comment">//设备模块名称</span></span><br><span class="line">    id_table:demo_pci_tbl,                   <span class="comment">//能够驱动的设备列表</span></span><br><span class="line">    probe:demo_probe,                        <span class="comment">//查找并初始化设备</span></span><br><span class="line">    remove:demo_remove                       <span class="comment">//卸载设备模块</span></span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">demo_init_module</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">demo_cleanup_module</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pci_unregister_driver(&amp;demo_pci_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*加载驱动程序模块入口*/</span></span><br><span class="line">module_init(demo_init_module);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*卸载驱动程序模块入口*/</span></span><br><span class="line">module_exit(demo_cleanup_module);</span><br></pre></td></tr></table></figure>

<p>（注意：同卸载和加载模块相关的函数或数据结构都要在前面加上_init 、__exit 等标识符，以便同普通函数区分开。）    </p>
<h2 id="初始化设备模块"><a href="#初始化设备模块" class="headerlink" title="初始化设备模块"></a>初始化设备模块</h2><p>​        linux系统下，对一个PCI设备的初始化，需要完成以下工作：</p>
<ol>
<li>检查PCI总线是否被linux内核支持。</li>
<li>检查设备是否插在总线插槽上，如果在，保存所占用插槽的位置等信息。</li>
<li>读出配置头中的信息提供给驱动程序使用。</li>
</ol>
<p>​        当linux内核启动并完成对所有PCI设备进行扫描、登录和分配资源等初始化操作时，会建立起系统中所有PCI设备的拓扑结构，此后当PCI驱动程序需要对设备进行初始化时，一般都会调用如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">demo_init_module</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*检查系统是否支持PCI总线*/</span></span><br><span class="line">    <span class="keyword">if</span>(!pci_present())</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册硬件驱动程序*/</span></span><br><span class="line">    <span class="keyword">if</span>(pci_register_driver(&amp;demo_pci_driver))&#123;</span><br><span class="line">        pci_unregister_driver(&amp;demo_pci_driver);</span><br><span class="line">            <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;           </span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> _init <span class="title">demo_probe</span><span class="params">(struct pci_dev * pci_dev,<span class="keyword">const</span> struct pci_device_id * pci_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">demo_card</span> * <span class="title">card</span> ;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*启动PCI设备*/</span></span><br><span class="line">    <span class="keyword">if</span>(pci_enable_device(pci_dev))</span><br><span class="line">        <span class="keyword">return</span> -EIO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置DMA标识*/</span></span><br><span class="line">    <span class="keyword">if</span>(pci_set_dma_mask(pci_dev,DEMO_DMA_MASK))&#123;</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在内核空间中动态申请内存*/</span></span><br><span class="line">    <span class="keyword">if</span>((card = kmalloc(<span class="keyword">sizeof</span>(struct demo_card),GFP_KERNEL))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        printk(KERN_ERR<span class="string">&quot;pci_demo:out of memory\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(card ,<span class="number">0</span>,<span class="keyword">sizeof</span>(*card));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*读取PCI配置信息*/</span></span><br><span class="line">    card-&gt;iobase = pci_resource_start(pci_dev,<span class="number">1</span>);</span><br><span class="line">    card-&gt;pci_dev = pci_dev;</span><br><span class="line">    card-&gt;pci_id  = pci_id-&gt;device;</span><br><span class="line">    card-&gt;irq = pci_dev-&gt;irq;</span><br><span class="line">    card-&gt;next = devs;</span><br><span class="line">    card-&gt;magic = DEMO_CARD_MEGIC;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置成总线主DMA模式*/</span></span><br><span class="line">    pci_set_master(pci_dev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*申请I/O资源*/</span></span><br><span class="line">    request_region(card-iobase,<span class="number">64</span>,card_names[pci_id-&gt;driver_data]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打开设备模块"><a href="#打开设备模块" class="headerlink" title="打开设备模块"></a>打开设备模块</h2><p>​        打开设备模块主要实现申请中断、检查读写模式及申请对设备的控制权等。在申请控制权时，非阻塞方式遇忙返回；否则进程主动接受调度，进入睡眠状态，等待其他进程释放对设备的控制权。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">demo_open</span><span class="params">(struct inode * inode,struct file * file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*申请中断，注册中断处理程序*/</span></span><br><span class="line">    request_irq(card-&gt; irq,&amp;demo_interrupt,SA_SHIRQ,card_names[pci_id-&gt;driver_data],card));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*检查读写模式*/</span></span><br><span class="line">    <span class="keyword">if</span>(file-&gt;f_mode&amp;FMODE_READ)&#123;</span><br><span class="line">         <span class="comment">/*...*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file-&gt;f_mode&amp;FMODE_WRITE)&#123;</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*申请对设备的控制权*/</span></span><br><span class="line">    down(&amp;card-&gt;open_sem);</span><br><span class="line">    <span class="keyword">while</span>(card-&gt;open_mode&amp;file-&gt;f_mode)&#123;</span><br><span class="line">        <span class="keyword">if</span>(file-&gt;f_flags&amp;O_NONBLOCK)&#123;</span><br><span class="line">            <span class="comment">/*NONBLOCK模式，返回 -EBUSY*/</span></span><br><span class="line">            up(card-&gt;open_sem);</span><br><span class="line">            <span class="keyword">return</span> -EBUSY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">/*等待调度，获得控制权*/</span></span><br><span class="line">            card-&gt;open_mode| = f_mode&amp;(FMODE_READ|FMODE_WRITE);</span><br><span class="line">            up(&amp;card -&gt;open_sem);</span><br><span class="line">             <span class="comment">/*设备打开，计数增1*/</span></span><br><span class="line">             MOD_INC_USE_COUNT;</span><br><span class="line">             <span class="comment">/*...*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据读写和控制模块"><a href="#数据读写和控制模块" class="headerlink" title="数据读写和控制模块"></a>数据读写和控制模块</h2><p>​        PCI设备驱动程序通过demo_fops结构中的函数demo_ioctl()，向应用程序提供对硬件进行控制的接口。例如通过它可以从I/O寄存器里读取一个数据，并传送到用户空间里。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">demo_ioctl</span><span class="params">(struct inode*inode,struct file*file,<span class="keyword">unsigned</span> <span class="keyword">int</span> cmd,<span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="keyword">switch</span>(cmd)&#123;</span><br><span class="line">        <span class="keyword">case</span> DEMO_RDATA:</span><br><span class="line">        <span class="comment">/*从IO端口读取4字节的数据*/</span></span><br><span class="line">            val =  inl(card-&gt;iobae + <span class="number">0x10</span>);</span><br><span class="line">    <span class="comment">/*将读取的数据传输到用户空间*/</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        在demo_fops里还可以实现诸如demo_read()、demo_mmap()等操作，<strong>linux内核源码中的driver目录</strong>里提供了许多设备驱动程序的源代码，那里可以找到类似的例子。在对资源的访问方式上，除了IO指令外，还有对外设IO内存的访问。对这些内存的操作，一方面可以通过把IO内存重新映射后，作为普通内存进行操作；另一方面也可以通过总线主DMA（Bus Master DMA）的方式，让设备把数据通过DMA传送到系统内存中。</p>
<h2 id="中断处理模块"><a href="#中断处理模块" class="headerlink" title="中断处理模块"></a>中断处理模块</h2><p>​        PC的中断资源比较有限，只有0~15的中断号，因此大部分外部设备都是以共享的形式申请中断号。当中断发生时，中断处理程序首先负责对中断进行识别，然后再做进一步的处理。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo_interrupt</span><span class="params">(<span class="keyword">int</span> irq,<span class="keyword">void</span> *dev_id,struct pt_regs*regs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">demo_card</span>*<span class="title">card</span> =</span> (struct demo_card*)dev_id;</span><br><span class="line">    u32 status;</span><br><span class="line">    spin_lock(&amp;card-&gt;lock);</span><br><span class="line">    <span class="comment">/*识别中断*/</span></span><br><span class="line">    status = inl(card-&gt;iobase+GLOB_STA);</span><br><span class="line">    <span class="keyword">if</span>(!(status&amp;INT_MASK))</span><br><span class="line">    &#123;</span><br><span class="line">        spin_unlock(&amp;card-&gt;lock);   </span><br><span class="line">        <span class="keyword">return</span>;   <span class="comment">/*not for us ?????*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*告诉设备已经收到中断*/</span></span><br><span class="line">    out1(status&amp;INT_MASK,card-&gt;iobase+GLOB_STA);</span><br><span class="line">    spin_lock(&amp;card-&gt;lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*其它进一步的处理，例如更新DMA缓冲区指针等*/</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="释放设备模块"><a href="#释放设备模块" class="headerlink" title="释放设备模块"></a>释放设备模块</h2><p>​        释放设备模块主要负责释放对设备的控制权，释放占用的内存和中断等，所做的事情正好和打开设备模块相反。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">demo_release</span><span class="params">(struct inode*inode,struct file*file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    card-&gt;open_mode &amp;=(FMODE_READ|FMODE_WRITE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*唤醒其它等待获取控制权的进程*/</span></span><br><span class="line">    wake_up(&amp;card-&gt;open_wait);</span><br><span class="line">    up(&amp;card-&gt;open_sem);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*释放中断*/</span></span><br><span class="line">    free_irq(card-&gt;irq,card);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设备打开计数增1*/</span></span><br><span class="line">    MOD_DEC_USE_COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="卸载设备模块"><a href="#卸载设备模块" class="headerlink" title="卸载设备模块"></a>卸载设备模块</h2><p>​         卸载设备模块与初始化设备模块是相对应的，实现起来相对比较简单，主要是调用函数pci_unregister_driver()从linux内核中注销设备驱动程序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> _exit <span class="title">demo_cleanup_module</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    pci_unregister_driver(&amp;demo_pci_driver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>​         PCI是外围设备互连（Peripheral Component Interconnect）的简称，作为一种通用的总线标准接口。<strong>每个PCI功能即PCI逻辑设备都唯一地对应一个pci_dev设备描述符</strong>。linux驱动程序通常使用结构（struct）表示一种设备，结构体中的变量代表某一具体设备，该变量存放了与该设备相关的所有信息。</p>
<p>​         用模块方式实现PCI设备驱动程序时，通常要实现一下几个部分：初始化设备模块、设备打开模块、数据读写和控制模块、中断处理模块、设备释放模块及设备卸载模块等。</p>
<p>​    </p>
]]></content>
      <categories>
        <category>Hardware</category>
        <category>驱动</category>
      </categories>
      <tags>
        <tag>PCI</tag>
      </tags>
  </entry>
</search>
